// Code generated by ent, DO NOT EDIT.

package ent

import (
	"transactor-server/pkg/db/ent/operationtype"
	"transactor-server/pkg/db/ent/transaction"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OperationTypeCreate is the builder for creating a OperationType entity.
type OperationTypeCreate struct {
	config
	mutation *OperationTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (otc *OperationTypeCreate) SetCreateTime(t time.Time) *OperationTypeCreate {
	otc.mutation.SetCreateTime(t)
	return otc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (otc *OperationTypeCreate) SetNillableCreateTime(t *time.Time) *OperationTypeCreate {
	if t != nil {
		otc.SetCreateTime(*t)
	}
	return otc
}

// SetUpdateTime sets the "update_time" field.
func (otc *OperationTypeCreate) SetUpdateTime(t time.Time) *OperationTypeCreate {
	otc.mutation.SetUpdateTime(t)
	return otc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (otc *OperationTypeCreate) SetNillableUpdateTime(t *time.Time) *OperationTypeCreate {
	if t != nil {
		otc.SetUpdateTime(*t)
	}
	return otc
}

// SetDescription sets the "description" field.
func (otc *OperationTypeCreate) SetDescription(s string) *OperationTypeCreate {
	otc.mutation.SetDescription(s)
	return otc
}

// SetIsDebit sets the "is_debit" field.
func (otc *OperationTypeCreate) SetIsDebit(b bool) *OperationTypeCreate {
	otc.mutation.SetIsDebit(b)
	return otc
}

// SetID sets the "id" field.
func (otc *OperationTypeCreate) SetID(i int) *OperationTypeCreate {
	otc.mutation.SetID(i)
	return otc
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (otc *OperationTypeCreate) AddTransactionIDs(ids ...int) *OperationTypeCreate {
	otc.mutation.AddTransactionIDs(ids...)
	return otc
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (otc *OperationTypeCreate) AddTransactions(t ...*Transaction) *OperationTypeCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return otc.AddTransactionIDs(ids...)
}

// Mutation returns the OperationTypeMutation object of the builder.
func (otc *OperationTypeCreate) Mutation() *OperationTypeMutation {
	return otc.mutation
}

// Save creates the OperationType in the database.
func (otc *OperationTypeCreate) Save(ctx context.Context) (*OperationType, error) {
	otc.defaults()
	return withHooks(ctx, otc.sqlSave, otc.mutation, otc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (otc *OperationTypeCreate) SaveX(ctx context.Context) *OperationType {
	v, err := otc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (otc *OperationTypeCreate) Exec(ctx context.Context) error {
	_, err := otc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otc *OperationTypeCreate) ExecX(ctx context.Context) {
	if err := otc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otc *OperationTypeCreate) defaults() {
	if _, ok := otc.mutation.CreateTime(); !ok {
		v := operationtype.DefaultCreateTime()
		otc.mutation.SetCreateTime(v)
	}
	if _, ok := otc.mutation.UpdateTime(); !ok {
		v := operationtype.DefaultUpdateTime()
		otc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (otc *OperationTypeCreate) check() error {
	if _, ok := otc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "OperationType.create_time"`)}
	}
	if _, ok := otc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "OperationType.update_time"`)}
	}
	if _, ok := otc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "OperationType.description"`)}
	}
	if _, ok := otc.mutation.IsDebit(); !ok {
		return &ValidationError{Name: "is_debit", err: errors.New(`ent: missing required field "OperationType.is_debit"`)}
	}
	return nil
}

func (otc *OperationTypeCreate) sqlSave(ctx context.Context) (*OperationType, error) {
	if err := otc.check(); err != nil {
		return nil, err
	}
	_node, _spec := otc.createSpec()
	if err := sqlgraph.CreateNode(ctx, otc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	otc.mutation.id = &_node.ID
	otc.mutation.done = true
	return _node, nil
}

func (otc *OperationTypeCreate) createSpec() (*OperationType, *sqlgraph.CreateSpec) {
	var (
		_node = &OperationType{config: otc.config}
		_spec = sqlgraph.NewCreateSpec(operationtype.Table, sqlgraph.NewFieldSpec(operationtype.FieldID, field.TypeInt))
	)
	_spec.OnConflict = otc.conflict
	if id, ok := otc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := otc.mutation.CreateTime(); ok {
		_spec.SetField(operationtype.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := otc.mutation.UpdateTime(); ok {
		_spec.SetField(operationtype.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := otc.mutation.Description(); ok {
		_spec.SetField(operationtype.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := otc.mutation.IsDebit(); ok {
		_spec.SetField(operationtype.FieldIsDebit, field.TypeBool, value)
		_node.IsDebit = value
	}
	if nodes := otc.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operationtype.TransactionsTable,
			Columns: []string{operationtype.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OperationType.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OperationTypeUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (otc *OperationTypeCreate) OnConflict(opts ...sql.ConflictOption) *OperationTypeUpsertOne {
	otc.conflict = opts
	return &OperationTypeUpsertOne{
		create: otc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OperationType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (otc *OperationTypeCreate) OnConflictColumns(columns ...string) *OperationTypeUpsertOne {
	otc.conflict = append(otc.conflict, sql.ConflictColumns(columns...))
	return &OperationTypeUpsertOne{
		create: otc,
	}
}

type (
	// OperationTypeUpsertOne is the builder for "upsert"-ing
	//  one OperationType node.
	OperationTypeUpsertOne struct {
		create *OperationTypeCreate
	}

	// OperationTypeUpsert is the "OnConflict" setter.
	OperationTypeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *OperationTypeUpsert) SetUpdateTime(v time.Time) *OperationTypeUpsert {
	u.Set(operationtype.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OperationTypeUpsert) UpdateUpdateTime() *OperationTypeUpsert {
	u.SetExcluded(operationtype.FieldUpdateTime)
	return u
}

// SetDescription sets the "description" field.
func (u *OperationTypeUpsert) SetDescription(v string) *OperationTypeUpsert {
	u.Set(operationtype.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *OperationTypeUpsert) UpdateDescription() *OperationTypeUpsert {
	u.SetExcluded(operationtype.FieldDescription)
	return u
}

// SetIsDebit sets the "is_debit" field.
func (u *OperationTypeUpsert) SetIsDebit(v bool) *OperationTypeUpsert {
	u.Set(operationtype.FieldIsDebit, v)
	return u
}

// UpdateIsDebit sets the "is_debit" field to the value that was provided on create.
func (u *OperationTypeUpsert) UpdateIsDebit() *OperationTypeUpsert {
	u.SetExcluded(operationtype.FieldIsDebit)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OperationType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(operationtype.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OperationTypeUpsertOne) UpdateNewValues() *OperationTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(operationtype.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(operationtype.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OperationType.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OperationTypeUpsertOne) Ignore() *OperationTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OperationTypeUpsertOne) DoNothing() *OperationTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OperationTypeCreate.OnConflict
// documentation for more info.
func (u *OperationTypeUpsertOne) Update(set func(*OperationTypeUpsert)) *OperationTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OperationTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *OperationTypeUpsertOne) SetUpdateTime(v time.Time) *OperationTypeUpsertOne {
	return u.Update(func(s *OperationTypeUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OperationTypeUpsertOne) UpdateUpdateTime() *OperationTypeUpsertOne {
	return u.Update(func(s *OperationTypeUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetDescription sets the "description" field.
func (u *OperationTypeUpsertOne) SetDescription(v string) *OperationTypeUpsertOne {
	return u.Update(func(s *OperationTypeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *OperationTypeUpsertOne) UpdateDescription() *OperationTypeUpsertOne {
	return u.Update(func(s *OperationTypeUpsert) {
		s.UpdateDescription()
	})
}

// SetIsDebit sets the "is_debit" field.
func (u *OperationTypeUpsertOne) SetIsDebit(v bool) *OperationTypeUpsertOne {
	return u.Update(func(s *OperationTypeUpsert) {
		s.SetIsDebit(v)
	})
}

// UpdateIsDebit sets the "is_debit" field to the value that was provided on create.
func (u *OperationTypeUpsertOne) UpdateIsDebit() *OperationTypeUpsertOne {
	return u.Update(func(s *OperationTypeUpsert) {
		s.UpdateIsDebit()
	})
}

// Exec executes the query.
func (u *OperationTypeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OperationTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OperationTypeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OperationTypeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OperationTypeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OperationTypeCreateBulk is the builder for creating many OperationType entities in bulk.
type OperationTypeCreateBulk struct {
	config
	err      error
	builders []*OperationTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the OperationType entities in the database.
func (otcb *OperationTypeCreateBulk) Save(ctx context.Context) ([]*OperationType, error) {
	if otcb.err != nil {
		return nil, otcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(otcb.builders))
	nodes := make([]*OperationType, len(otcb.builders))
	mutators := make([]Mutator, len(otcb.builders))
	for i := range otcb.builders {
		func(i int, root context.Context) {
			builder := otcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OperationTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, otcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = otcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, otcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, otcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (otcb *OperationTypeCreateBulk) SaveX(ctx context.Context) []*OperationType {
	v, err := otcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (otcb *OperationTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := otcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otcb *OperationTypeCreateBulk) ExecX(ctx context.Context) {
	if err := otcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OperationType.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OperationTypeUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (otcb *OperationTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *OperationTypeUpsertBulk {
	otcb.conflict = opts
	return &OperationTypeUpsertBulk{
		create: otcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OperationType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (otcb *OperationTypeCreateBulk) OnConflictColumns(columns ...string) *OperationTypeUpsertBulk {
	otcb.conflict = append(otcb.conflict, sql.ConflictColumns(columns...))
	return &OperationTypeUpsertBulk{
		create: otcb,
	}
}

// OperationTypeUpsertBulk is the builder for "upsert"-ing
// a bulk of OperationType nodes.
type OperationTypeUpsertBulk struct {
	create *OperationTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OperationType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(operationtype.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OperationTypeUpsertBulk) UpdateNewValues() *OperationTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(operationtype.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(operationtype.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OperationType.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OperationTypeUpsertBulk) Ignore() *OperationTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OperationTypeUpsertBulk) DoNothing() *OperationTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OperationTypeCreateBulk.OnConflict
// documentation for more info.
func (u *OperationTypeUpsertBulk) Update(set func(*OperationTypeUpsert)) *OperationTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OperationTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *OperationTypeUpsertBulk) SetUpdateTime(v time.Time) *OperationTypeUpsertBulk {
	return u.Update(func(s *OperationTypeUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OperationTypeUpsertBulk) UpdateUpdateTime() *OperationTypeUpsertBulk {
	return u.Update(func(s *OperationTypeUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetDescription sets the "description" field.
func (u *OperationTypeUpsertBulk) SetDescription(v string) *OperationTypeUpsertBulk {
	return u.Update(func(s *OperationTypeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *OperationTypeUpsertBulk) UpdateDescription() *OperationTypeUpsertBulk {
	return u.Update(func(s *OperationTypeUpsert) {
		s.UpdateDescription()
	})
}

// SetIsDebit sets the "is_debit" field.
func (u *OperationTypeUpsertBulk) SetIsDebit(v bool) *OperationTypeUpsertBulk {
	return u.Update(func(s *OperationTypeUpsert) {
		s.SetIsDebit(v)
	})
}

// UpdateIsDebit sets the "is_debit" field to the value that was provided on create.
func (u *OperationTypeUpsertBulk) UpdateIsDebit() *OperationTypeUpsertBulk {
	return u.Update(func(s *OperationTypeUpsert) {
		s.UpdateIsDebit()
	})
}

// Exec executes the query.
func (u *OperationTypeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OperationTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OperationTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OperationTypeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
