// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"transactor-server/pkg/db/ent/operationtype"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OperationType is the model entity for the OperationType schema.
type OperationType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// IsDebit holds the value of the "is_debit" field.
	IsDebit bool `json:"is_debit,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OperationTypeQuery when eager-loading is set.
	Edges        OperationTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OperationTypeEdges holds the relations/edges for other nodes in the graph.
type OperationTypeEdges struct {
	// Transactions holds the value of the transactions edge.
	Transactions []*Transaction `json:"transactions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e OperationTypeEdges) TransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[0] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OperationType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case operationtype.FieldIsDebit:
			values[i] = new(sql.NullBool)
		case operationtype.FieldID:
			values[i] = new(sql.NullInt64)
		case operationtype.FieldDescription:
			values[i] = new(sql.NullString)
		case operationtype.FieldCreateTime, operationtype.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OperationType fields.
func (ot *OperationType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case operationtype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ot.ID = int(value.Int64)
		case operationtype.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ot.CreateTime = value.Time
			}
		case operationtype.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ot.UpdateTime = value.Time
			}
		case operationtype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ot.Description = value.String
			}
		case operationtype.FieldIsDebit:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_debit", values[i])
			} else if value.Valid {
				ot.IsDebit = value.Bool
			}
		default:
			ot.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OperationType.
// This includes values selected through modifiers, order, etc.
func (ot *OperationType) Value(name string) (ent.Value, error) {
	return ot.selectValues.Get(name)
}

// QueryTransactions queries the "transactions" edge of the OperationType entity.
func (ot *OperationType) QueryTransactions() *TransactionQuery {
	return NewOperationTypeClient(ot.config).QueryTransactions(ot)
}

// Update returns a builder for updating this OperationType.
// Note that you need to call OperationType.Unwrap() before calling this method if this OperationType
// was returned from a transaction, and the transaction was committed or rolled back.
func (ot *OperationType) Update() *OperationTypeUpdateOne {
	return NewOperationTypeClient(ot.config).UpdateOne(ot)
}

// Unwrap unwraps the OperationType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ot *OperationType) Unwrap() *OperationType {
	_tx, ok := ot.config.driver.(*txDriver)
	if !ok {
		panic("ent: OperationType is not a transactional entity")
	}
	ot.config.driver = _tx.drv
	return ot
}

// String implements the fmt.Stringer.
func (ot *OperationType) String() string {
	var builder strings.Builder
	builder.WriteString("OperationType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ot.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ot.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ot.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ot.Description)
	builder.WriteString(", ")
	builder.WriteString("is_debit=")
	builder.WriteString(fmt.Sprintf("%v", ot.IsDebit))
	builder.WriteByte(')')
	return builder.String()
}

// OperationTypes is a parsable slice of OperationType.
type OperationTypes []*OperationType
