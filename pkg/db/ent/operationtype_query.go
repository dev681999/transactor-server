// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"transactor-server/pkg/db/ent/operationtype"
	"transactor-server/pkg/db/ent/predicate"
	"transactor-server/pkg/db/ent/transaction"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OperationTypeQuery is the builder for querying OperationType entities.
type OperationTypeQuery struct {
	config
	ctx              *QueryContext
	order            []operationtype.OrderOption
	inters           []Interceptor
	predicates       []predicate.OperationType
	withTransactions *TransactionQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OperationTypeQuery builder.
func (otq *OperationTypeQuery) Where(ps ...predicate.OperationType) *OperationTypeQuery {
	otq.predicates = append(otq.predicates, ps...)
	return otq
}

// Limit the number of records to be returned by this query.
func (otq *OperationTypeQuery) Limit(limit int) *OperationTypeQuery {
	otq.ctx.Limit = &limit
	return otq
}

// Offset to start from.
func (otq *OperationTypeQuery) Offset(offset int) *OperationTypeQuery {
	otq.ctx.Offset = &offset
	return otq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (otq *OperationTypeQuery) Unique(unique bool) *OperationTypeQuery {
	otq.ctx.Unique = &unique
	return otq
}

// Order specifies how the records should be ordered.
func (otq *OperationTypeQuery) Order(o ...operationtype.OrderOption) *OperationTypeQuery {
	otq.order = append(otq.order, o...)
	return otq
}

// QueryTransactions chains the current query on the "transactions" edge.
func (otq *OperationTypeQuery) QueryTransactions() *TransactionQuery {
	query := (&TransactionClient{config: otq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := otq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := otq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(operationtype.Table, operationtype.FieldID, selector),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, operationtype.TransactionsTable, operationtype.TransactionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(otq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OperationType entity from the query.
// Returns a *NotFoundError when no OperationType was found.
func (otq *OperationTypeQuery) First(ctx context.Context) (*OperationType, error) {
	nodes, err := otq.Limit(1).All(setContextOp(ctx, otq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{operationtype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (otq *OperationTypeQuery) FirstX(ctx context.Context) *OperationType {
	node, err := otq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OperationType ID from the query.
// Returns a *NotFoundError when no OperationType ID was found.
func (otq *OperationTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = otq.Limit(1).IDs(setContextOp(ctx, otq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{operationtype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (otq *OperationTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := otq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OperationType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OperationType entity is found.
// Returns a *NotFoundError when no OperationType entities are found.
func (otq *OperationTypeQuery) Only(ctx context.Context) (*OperationType, error) {
	nodes, err := otq.Limit(2).All(setContextOp(ctx, otq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{operationtype.Label}
	default:
		return nil, &NotSingularError{operationtype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (otq *OperationTypeQuery) OnlyX(ctx context.Context) *OperationType {
	node, err := otq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OperationType ID in the query.
// Returns a *NotSingularError when more than one OperationType ID is found.
// Returns a *NotFoundError when no entities are found.
func (otq *OperationTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = otq.Limit(2).IDs(setContextOp(ctx, otq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{operationtype.Label}
	default:
		err = &NotSingularError{operationtype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (otq *OperationTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := otq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OperationTypes.
func (otq *OperationTypeQuery) All(ctx context.Context) ([]*OperationType, error) {
	ctx = setContextOp(ctx, otq.ctx, ent.OpQueryAll)
	if err := otq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OperationType, *OperationTypeQuery]()
	return withInterceptors[[]*OperationType](ctx, otq, qr, otq.inters)
}

// AllX is like All, but panics if an error occurs.
func (otq *OperationTypeQuery) AllX(ctx context.Context) []*OperationType {
	nodes, err := otq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OperationType IDs.
func (otq *OperationTypeQuery) IDs(ctx context.Context) (ids []int, err error) {
	if otq.ctx.Unique == nil && otq.path != nil {
		otq.Unique(true)
	}
	ctx = setContextOp(ctx, otq.ctx, ent.OpQueryIDs)
	if err = otq.Select(operationtype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (otq *OperationTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := otq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (otq *OperationTypeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, otq.ctx, ent.OpQueryCount)
	if err := otq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, otq, querierCount[*OperationTypeQuery](), otq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (otq *OperationTypeQuery) CountX(ctx context.Context) int {
	count, err := otq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (otq *OperationTypeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, otq.ctx, ent.OpQueryExist)
	switch _, err := otq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (otq *OperationTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := otq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OperationTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (otq *OperationTypeQuery) Clone() *OperationTypeQuery {
	if otq == nil {
		return nil
	}
	return &OperationTypeQuery{
		config:           otq.config,
		ctx:              otq.ctx.Clone(),
		order:            append([]operationtype.OrderOption{}, otq.order...),
		inters:           append([]Interceptor{}, otq.inters...),
		predicates:       append([]predicate.OperationType{}, otq.predicates...),
		withTransactions: otq.withTransactions.Clone(),
		// clone intermediate query.
		sql:       otq.sql.Clone(),
		path:      otq.path,
		modifiers: append([]func(*sql.Selector){}, otq.modifiers...),
	}
}

// WithTransactions tells the query-builder to eager-load the nodes that are connected to
// the "transactions" edge. The optional arguments are used to configure the query builder of the edge.
func (otq *OperationTypeQuery) WithTransactions(opts ...func(*TransactionQuery)) *OperationTypeQuery {
	query := (&TransactionClient{config: otq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	otq.withTransactions = query
	return otq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OperationType.Query().
//		GroupBy(operationtype.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (otq *OperationTypeQuery) GroupBy(field string, fields ...string) *OperationTypeGroupBy {
	otq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OperationTypeGroupBy{build: otq}
	grbuild.flds = &otq.ctx.Fields
	grbuild.label = operationtype.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.OperationType.Query().
//		Select(operationtype.FieldCreateTime).
//		Scan(ctx, &v)
func (otq *OperationTypeQuery) Select(fields ...string) *OperationTypeSelect {
	otq.ctx.Fields = append(otq.ctx.Fields, fields...)
	sbuild := &OperationTypeSelect{OperationTypeQuery: otq}
	sbuild.label = operationtype.Label
	sbuild.flds, sbuild.scan = &otq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OperationTypeSelect configured with the given aggregations.
func (otq *OperationTypeQuery) Aggregate(fns ...AggregateFunc) *OperationTypeSelect {
	return otq.Select().Aggregate(fns...)
}

func (otq *OperationTypeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range otq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, otq); err != nil {
				return err
			}
		}
	}
	for _, f := range otq.ctx.Fields {
		if !operationtype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if otq.path != nil {
		prev, err := otq.path(ctx)
		if err != nil {
			return err
		}
		otq.sql = prev
	}
	return nil
}

func (otq *OperationTypeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OperationType, error) {
	var (
		nodes       = []*OperationType{}
		_spec       = otq.querySpec()
		loadedTypes = [1]bool{
			otq.withTransactions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OperationType).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OperationType{config: otq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(otq.modifiers) > 0 {
		_spec.Modifiers = otq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, otq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := otq.withTransactions; query != nil {
		if err := otq.loadTransactions(ctx, query, nodes,
			func(n *OperationType) { n.Edges.Transactions = []*Transaction{} },
			func(n *OperationType, e *Transaction) { n.Edges.Transactions = append(n.Edges.Transactions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (otq *OperationTypeQuery) loadTransactions(ctx context.Context, query *TransactionQuery, nodes []*OperationType, init func(*OperationType), assign func(*OperationType, *Transaction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*OperationType)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(transaction.FieldOperationTypeID)
	}
	query.Where(predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(operationtype.TransactionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OperationTypeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "operation_type_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (otq *OperationTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := otq.querySpec()
	if len(otq.modifiers) > 0 {
		_spec.Modifiers = otq.modifiers
	}
	_spec.Node.Columns = otq.ctx.Fields
	if len(otq.ctx.Fields) > 0 {
		_spec.Unique = otq.ctx.Unique != nil && *otq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, otq.driver, _spec)
}

func (otq *OperationTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(operationtype.Table, operationtype.Columns, sqlgraph.NewFieldSpec(operationtype.FieldID, field.TypeInt))
	_spec.From = otq.sql
	if unique := otq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if otq.path != nil {
		_spec.Unique = true
	}
	if fields := otq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operationtype.FieldID)
		for i := range fields {
			if fields[i] != operationtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := otq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := otq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := otq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := otq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (otq *OperationTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(otq.driver.Dialect())
	t1 := builder.Table(operationtype.Table)
	columns := otq.ctx.Fields
	if len(columns) == 0 {
		columns = operationtype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if otq.sql != nil {
		selector = otq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if otq.ctx.Unique != nil && *otq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range otq.modifiers {
		m(selector)
	}
	for _, p := range otq.predicates {
		p(selector)
	}
	for _, p := range otq.order {
		p(selector)
	}
	if offset := otq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := otq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (otq *OperationTypeQuery) Modify(modifiers ...func(s *sql.Selector)) *OperationTypeSelect {
	otq.modifiers = append(otq.modifiers, modifiers...)
	return otq.Select()
}

// OperationTypeGroupBy is the group-by builder for OperationType entities.
type OperationTypeGroupBy struct {
	selector
	build *OperationTypeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (otgb *OperationTypeGroupBy) Aggregate(fns ...AggregateFunc) *OperationTypeGroupBy {
	otgb.fns = append(otgb.fns, fns...)
	return otgb
}

// Scan applies the selector query and scans the result into the given value.
func (otgb *OperationTypeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, otgb.build.ctx, ent.OpQueryGroupBy)
	if err := otgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OperationTypeQuery, *OperationTypeGroupBy](ctx, otgb.build, otgb, otgb.build.inters, v)
}

func (otgb *OperationTypeGroupBy) sqlScan(ctx context.Context, root *OperationTypeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(otgb.fns))
	for _, fn := range otgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*otgb.flds)+len(otgb.fns))
		for _, f := range *otgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*otgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := otgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OperationTypeSelect is the builder for selecting fields of OperationType entities.
type OperationTypeSelect struct {
	*OperationTypeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ots *OperationTypeSelect) Aggregate(fns ...AggregateFunc) *OperationTypeSelect {
	ots.fns = append(ots.fns, fns...)
	return ots
}

// Scan applies the selector query and scans the result into the given value.
func (ots *OperationTypeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ots.ctx, ent.OpQuerySelect)
	if err := ots.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OperationTypeQuery, *OperationTypeSelect](ctx, ots.OperationTypeQuery, ots, ots.inters, v)
}

func (ots *OperationTypeSelect) sqlScan(ctx context.Context, root *OperationTypeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ots.fns))
	for _, fn := range ots.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ots.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ots.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ots *OperationTypeSelect) Modify(modifiers ...func(s *sql.Selector)) *OperationTypeSelect {
	ots.modifiers = append(ots.modifiers, modifiers...)
	return ots
}
