// Code generated by ent, DO NOT EDIT.

package ent

import (
	"transactor-server/pkg/db/ent/operationtype"
	"transactor-server/pkg/db/ent/predicate"
	"transactor-server/pkg/db/ent/transaction"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OperationTypeUpdate is the builder for updating OperationType entities.
type OperationTypeUpdate struct {
	config
	hooks     []Hook
	mutation  *OperationTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OperationTypeUpdate builder.
func (otu *OperationTypeUpdate) Where(ps ...predicate.OperationType) *OperationTypeUpdate {
	otu.mutation.Where(ps...)
	return otu
}

// SetUpdateTime sets the "update_time" field.
func (otu *OperationTypeUpdate) SetUpdateTime(t time.Time) *OperationTypeUpdate {
	otu.mutation.SetUpdateTime(t)
	return otu
}

// SetDescription sets the "description" field.
func (otu *OperationTypeUpdate) SetDescription(s string) *OperationTypeUpdate {
	otu.mutation.SetDescription(s)
	return otu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (otu *OperationTypeUpdate) SetNillableDescription(s *string) *OperationTypeUpdate {
	if s != nil {
		otu.SetDescription(*s)
	}
	return otu
}

// SetIsDebit sets the "is_debit" field.
func (otu *OperationTypeUpdate) SetIsDebit(b bool) *OperationTypeUpdate {
	otu.mutation.SetIsDebit(b)
	return otu
}

// SetNillableIsDebit sets the "is_debit" field if the given value is not nil.
func (otu *OperationTypeUpdate) SetNillableIsDebit(b *bool) *OperationTypeUpdate {
	if b != nil {
		otu.SetIsDebit(*b)
	}
	return otu
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (otu *OperationTypeUpdate) AddTransactionIDs(ids ...int) *OperationTypeUpdate {
	otu.mutation.AddTransactionIDs(ids...)
	return otu
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (otu *OperationTypeUpdate) AddTransactions(t ...*Transaction) *OperationTypeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return otu.AddTransactionIDs(ids...)
}

// Mutation returns the OperationTypeMutation object of the builder.
func (otu *OperationTypeUpdate) Mutation() *OperationTypeMutation {
	return otu.mutation
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (otu *OperationTypeUpdate) ClearTransactions() *OperationTypeUpdate {
	otu.mutation.ClearTransactions()
	return otu
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (otu *OperationTypeUpdate) RemoveTransactionIDs(ids ...int) *OperationTypeUpdate {
	otu.mutation.RemoveTransactionIDs(ids...)
	return otu
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (otu *OperationTypeUpdate) RemoveTransactions(t ...*Transaction) *OperationTypeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return otu.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (otu *OperationTypeUpdate) Save(ctx context.Context) (int, error) {
	otu.defaults()
	return withHooks(ctx, otu.sqlSave, otu.mutation, otu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (otu *OperationTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := otu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (otu *OperationTypeUpdate) Exec(ctx context.Context) error {
	_, err := otu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otu *OperationTypeUpdate) ExecX(ctx context.Context) {
	if err := otu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otu *OperationTypeUpdate) defaults() {
	if _, ok := otu.mutation.UpdateTime(); !ok {
		v := operationtype.UpdateDefaultUpdateTime()
		otu.mutation.SetUpdateTime(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (otu *OperationTypeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OperationTypeUpdate {
	otu.modifiers = append(otu.modifiers, modifiers...)
	return otu
}

func (otu *OperationTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(operationtype.Table, operationtype.Columns, sqlgraph.NewFieldSpec(operationtype.FieldID, field.TypeInt))
	if ps := otu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := otu.mutation.UpdateTime(); ok {
		_spec.SetField(operationtype.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := otu.mutation.Description(); ok {
		_spec.SetField(operationtype.FieldDescription, field.TypeString, value)
	}
	if value, ok := otu.mutation.IsDebit(); ok {
		_spec.SetField(operationtype.FieldIsDebit, field.TypeBool, value)
	}
	if otu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operationtype.TransactionsTable,
			Columns: []string{operationtype.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otu.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !otu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operationtype.TransactionsTable,
			Columns: []string{operationtype.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otu.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operationtype.TransactionsTable,
			Columns: []string{operationtype.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(otu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, otu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operationtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	otu.mutation.done = true
	return n, nil
}

// OperationTypeUpdateOne is the builder for updating a single OperationType entity.
type OperationTypeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OperationTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (otuo *OperationTypeUpdateOne) SetUpdateTime(t time.Time) *OperationTypeUpdateOne {
	otuo.mutation.SetUpdateTime(t)
	return otuo
}

// SetDescription sets the "description" field.
func (otuo *OperationTypeUpdateOne) SetDescription(s string) *OperationTypeUpdateOne {
	otuo.mutation.SetDescription(s)
	return otuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (otuo *OperationTypeUpdateOne) SetNillableDescription(s *string) *OperationTypeUpdateOne {
	if s != nil {
		otuo.SetDescription(*s)
	}
	return otuo
}

// SetIsDebit sets the "is_debit" field.
func (otuo *OperationTypeUpdateOne) SetIsDebit(b bool) *OperationTypeUpdateOne {
	otuo.mutation.SetIsDebit(b)
	return otuo
}

// SetNillableIsDebit sets the "is_debit" field if the given value is not nil.
func (otuo *OperationTypeUpdateOne) SetNillableIsDebit(b *bool) *OperationTypeUpdateOne {
	if b != nil {
		otuo.SetIsDebit(*b)
	}
	return otuo
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (otuo *OperationTypeUpdateOne) AddTransactionIDs(ids ...int) *OperationTypeUpdateOne {
	otuo.mutation.AddTransactionIDs(ids...)
	return otuo
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (otuo *OperationTypeUpdateOne) AddTransactions(t ...*Transaction) *OperationTypeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return otuo.AddTransactionIDs(ids...)
}

// Mutation returns the OperationTypeMutation object of the builder.
func (otuo *OperationTypeUpdateOne) Mutation() *OperationTypeMutation {
	return otuo.mutation
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (otuo *OperationTypeUpdateOne) ClearTransactions() *OperationTypeUpdateOne {
	otuo.mutation.ClearTransactions()
	return otuo
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (otuo *OperationTypeUpdateOne) RemoveTransactionIDs(ids ...int) *OperationTypeUpdateOne {
	otuo.mutation.RemoveTransactionIDs(ids...)
	return otuo
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (otuo *OperationTypeUpdateOne) RemoveTransactions(t ...*Transaction) *OperationTypeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return otuo.RemoveTransactionIDs(ids...)
}

// Where appends a list predicates to the OperationTypeUpdate builder.
func (otuo *OperationTypeUpdateOne) Where(ps ...predicate.OperationType) *OperationTypeUpdateOne {
	otuo.mutation.Where(ps...)
	return otuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (otuo *OperationTypeUpdateOne) Select(field string, fields ...string) *OperationTypeUpdateOne {
	otuo.fields = append([]string{field}, fields...)
	return otuo
}

// Save executes the query and returns the updated OperationType entity.
func (otuo *OperationTypeUpdateOne) Save(ctx context.Context) (*OperationType, error) {
	otuo.defaults()
	return withHooks(ctx, otuo.sqlSave, otuo.mutation, otuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (otuo *OperationTypeUpdateOne) SaveX(ctx context.Context) *OperationType {
	node, err := otuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (otuo *OperationTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := otuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otuo *OperationTypeUpdateOne) ExecX(ctx context.Context) {
	if err := otuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otuo *OperationTypeUpdateOne) defaults() {
	if _, ok := otuo.mutation.UpdateTime(); !ok {
		v := operationtype.UpdateDefaultUpdateTime()
		otuo.mutation.SetUpdateTime(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (otuo *OperationTypeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OperationTypeUpdateOne {
	otuo.modifiers = append(otuo.modifiers, modifiers...)
	return otuo
}

func (otuo *OperationTypeUpdateOne) sqlSave(ctx context.Context) (_node *OperationType, err error) {
	_spec := sqlgraph.NewUpdateSpec(operationtype.Table, operationtype.Columns, sqlgraph.NewFieldSpec(operationtype.FieldID, field.TypeInt))
	id, ok := otuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OperationType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := otuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operationtype.FieldID)
		for _, f := range fields {
			if !operationtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operationtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := otuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := otuo.mutation.UpdateTime(); ok {
		_spec.SetField(operationtype.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := otuo.mutation.Description(); ok {
		_spec.SetField(operationtype.FieldDescription, field.TypeString, value)
	}
	if value, ok := otuo.mutation.IsDebit(); ok {
		_spec.SetField(operationtype.FieldIsDebit, field.TypeBool, value)
	}
	if otuo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operationtype.TransactionsTable,
			Columns: []string{operationtype.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otuo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !otuo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operationtype.TransactionsTable,
			Columns: []string{operationtype.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otuo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operationtype.TransactionsTable,
			Columns: []string{operationtype.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(otuo.modifiers...)
	_node = &OperationType{config: otuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, otuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operationtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	otuo.mutation.done = true
	return _node, nil
}
