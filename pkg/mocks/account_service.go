// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	account "transactor-server/pkg/account"

	mock "github.com/stretchr/testify/mock"
)

// MockAccountService is an autogenerated mock type for the Service type
type MockAccountService struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MockAccountService) Create(_a0 context.Context, _a1 *account.CreateRequest) (*account.CreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *account.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.CreateRequest) (*account.CreateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.CreateRequest) *account.CreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.CreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.CreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockAccountService) Get(_a0 context.Context, _a1 int) (*account.Account, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *account.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*account.Account, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *account.Account); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockAccountService creates a new instance of MockAccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountService {
	mock := &MockAccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
